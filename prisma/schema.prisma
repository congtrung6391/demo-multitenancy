generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?    @map("email_verified")
  username      String?      @unique
  password      String?
  image         String?
  archived      Boolean      @default(false)
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @default(now()) @updatedAt @map("updated_at")
  accessStatus  AccessStatus @default(PENDING) @map("access_status")
  accessLevel   AccessLevel  @default(ALUMNI) @map("access_level")
  accessMode    AccessMode   @default(FULL_ACCESS) @map("access_mode")
  classId       String?      @map("class_id")
  accounts      Account[]
  careers       Career[]
  Education     Education[]
  information   Information?
  class         Class?       @relation(fields: [classId], references: [id])

  @@unique([id, email])
  @@map("users")
}

model Grade {
  id        String   @id @default(cuid())
  archived  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  code      String   @unique
  name      String
  classes   Class[]

  @@map("grades")
}

model Class {
  id          String   @id @default(cuid())
  gradeId     String   @map("grade_id")
  archived    Boolean  @default(false)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
  name        String
  description String?
  grade       Grade    @relation(fields: [gradeId], references: [id])
  users       User[]

  @@map("classes")
}

model Information {
  id                   String         @id @default(cuid())
  bio                  String?
  avatarUrl            String?        @map("avatar_url")
  emailPublicity       ScopePublicity @default(PRIVATE) @map("email_publicity")
  phone                String?
  phonePublicity       ScopePublicity @default(PRIVATE) @map("phone_publicity")
  facebookUrl          String?        @map("facebook_url")
  facebookPublicity    ScopePublicity @default(PRIVATE) @map("facebook_publicity")
  dateOfBirth          DateTime?      @map("date_of_birth")
  dateOfBirthPublicity ScopePublicity @default(PRIVATE) @map("date_of_birth_publicity")
  userId               String         @unique
  className            String?        @map("class_name")
  gradeCode            String?        @map("grade_code")
  gradeName            String?        @map("grade_name")
  userEmail            String?        @map("user_email")
  coverImageUrl        String?        @map("cover_image_url")
  user                 User           @relation(fields: [userId], references: [id])

  @@map("informations")
}

model Career {
  id        String   @id @default(cuid())
  company   String
  endDate   DateTime @map("end_date")
  jobTitle  String   @map("job_title")
  startDate DateTime @map("start_date")
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])

  @@map("careers")
}

model Education {
  id        String    @id @default(cuid())
  degree    String?
  school    String
  startDate DateTime? @map("start_date")
  endDate   DateTime? @map("end_date")
  userId    String    @map("user_id")
  user      User      @relation(fields: [userId], references: [id])

  @@map("educations")
}

model TestTable {
  id   String @id @default(cuid())
  name String

  @@map("test_model")
}

model test_model_2 {
  id   String @id
  name String
}

model test_model_3 {
  id   String @id
  name String
}

model test_model_4 {
  id   String @id
  name String
}

model test_model_5 {
  id   String @id
  name String
}

enum AccessLevel {
  SCHOOL_ADMIN
  ALUMNI
  CLASS_MOD
  GRADE_MOD
}

enum AccessStatus {
  PENDING
  APPROVED
}

enum AccessMode {
  FULL_ACCESS
  READ_ONLY
}

enum ScopePublicity {
  PRIVATE
  CLASS
  GRADE
  SCHOOL
}
